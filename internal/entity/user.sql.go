// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package entity

import (
	"context"

	"github.com/google/uuid"
)

const countUser = `-- name: CountUser :one
SELECT COUNT(id) FROM "user"
`

func (q *Queries) CountUser(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countUserStmt, countUser)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (username, password) VALUES ($1, $2) RETURNING id, username
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type CreateUserRow struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, arg.Username, arg.Password)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user" WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const getByUsername = `-- name: GetByUsername :one
SELECT id, username, password FROM "user" WHERE username = $1 AND deleted_at IS NULL LIMIT 1
`

type GetByUsernameRow struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	Password string    `json:"password"`
}

func (q *Queries) GetByUsername(ctx context.Context, username string) (GetByUsernameRow, error) {
	row := q.queryRow(ctx, q.getByUsernameStmt, getByUsername, username)
	var i GetByUsernameRow
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username FROM "user" WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

type GetUserRow struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
}

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (GetUserRow, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT id, username FROM "user" ORDER BY username LIMIT($1) OFFSET($2)
`

type ListUserParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListUserRow struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
}

func (q *Queries) ListUser(ctx context.Context, arg ListUserParams) ([]ListUserRow, error) {
	rows, err := q.query(ctx, q.listUserStmt, listUser, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUserRow
	for rows.Next() {
		var i ListUserRow
		if err := rows.Scan(&i.ID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteUser = `-- name: SoftDeleteUser :one
UPDATE "user" SET deleted_at = (current_timestamp AT TIME ZONE 'UTC') WHERE id = $1 AND deleted_at IS NULL RETURNING id, username
`

type SoftDeleteUserRow struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
}

func (q *Queries) SoftDeleteUser(ctx context.Context, id uuid.UUID) (SoftDeleteUserRow, error) {
	row := q.queryRow(ctx, q.softDeleteUserStmt, softDeleteUser, id)
	var i SoftDeleteUserRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
SET username = CASE WHEN $2::VARCHAR <> ''
               THEN $2::VARCHAR
               ELSE username 
               END,
    password = CASE WHEN $3::VARCHAR <> ''
               THEN $3::VARCHAR
               ELSE password 
               END
WHERE id = $1
RETURNING id, username
`

type UpdateUserParams struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	Password string    `json:"password"`
}

type UpdateUserRow struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser, arg.ID, arg.Username, arg.Password)
	var i UpdateUserRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}
