// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package models

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countUser = `-- name: CountUser :one
SELECT COUNT(*) FROM "user"
`

func (q *Queries) CountUser(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUser)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
  username, password
) VALUES (
  $1, $2
)
RETURNING id, username, created_at, updated_at
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type CreateUserRow struct {
	ID        uuid.UUID `json:"id"`
	Username  string    `json:"username"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM "user"
WHERE id = $1
RETURNING id, username, password, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getByUsernameAndPassword = `-- name: GetByUsernameAndPassword :one
SELECT id, username, password, created_at, updated_at, deleted_at FROM "user"
WHERE username = $1 AND password = $2 LIMIT 1
`

type GetByUsernameAndPasswordParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) GetByUsernameAndPassword(ctx context.Context, arg *GetByUsernameAndPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, getByUsernameAndPassword, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, created_at, updated_at, deleted_at FROM "user"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT id, username, password, created_at, updated_at, deleted_at FROM "user"
ORDER BY username
LIMIT($1)
OFFSET($2)
`

type ListUserParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUser(ctx context.Context, arg *ListUserParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUser, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
SET username = CASE WHEN $2::VARCHAR <> ''
               THEN $2::VARCHAR
               ELSE username END,
    password = CASE WHEN $3::VARCHAR <> ''
               THEN $3::VARCHAR
               ELSE password END
WHERE id = $1
RETURNING id, username, created_at, updated_at
`

type UpdateUserParams struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	Password string    `json:"password"`
}

type UpdateUserRow struct {
	ID        uuid.UUID `json:"id"`
	Username  string    `json:"username"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.Username, arg.Password)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
